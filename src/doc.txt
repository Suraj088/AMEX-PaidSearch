 <IntersectionHelper onIntersectChange={(intersecting) => setIsIntersecting(intersecting)}>
        <CardHeaderSection
          className="hidden-sm-down"
          sectionTitle={<p class="heading-4 font-weight-bold">Select a Card</p>}
          sectionTitleExtraClasses="flex-align-self-center hidden-sm-down"
        >
          <div className="row flex-justify-center card-compare-content-node-container">
            {itemState.state.subsetItems.map((item, idx) => (
              <button
                key={item.id}
                data-content-id="card-selection"
                data-card-id={item.id}
                className={cx(columnClass, 'pad-2 card-compare-card-selection-button')}
                onClick={() => setActiveItemIndex(idx)}
                aria-pressed={item.id === activeItem.id}
              >
                <img
                  className="card-compare-card-image"
                  src={item.image}
                  alt=""
                  aria-labelledby={titleId}
                />
              </button>
            ))}
          </div>
        </CardHeaderSection>
      </IntersectionHelper>
      <FullBleedContainerFluid key={activeItem.id}>
        <div
          className="card-compare-header-row dls-gray-06 dls-gray-01-bg"
          style={`background-color: ${activeItem.quickCompareColor} !important;`}
        >
          <div className="container-fluid container-fluid-capped">
            <div className="row">
              <div className="col col-xs-3 hidden-sm-down position-relative">
                <img
                  className="card-header-lifestyle-image margin-3-t"
                  src={activeItem.quickCompareImage}
                  alt=""
                  aria-labelledby={titleId}
                />
              </div>
              <div className="col col-xs-12 col-md-6 pad-3-tb card-compare-content-node-container">
                <div
                  key={activeItem.id}
                  data-content-id="welcome-offer"
                  data-card-id={activeItem.id}
                  className={cx('pad-2-lr')}
                >
                  {activeItem.quickCompare.map((i, idx) => (
                    <CardCompareContentNode key={`${idx}`} node={i} />
                  ))}
                </div>
              </div>
              <div className="col col-xs-3 hidden-sm-down pad-3-tb text-align-center flex-align-self-center">
                <a
                  href={activeItem.pdpUrl}
                  key={activeItem.id}
                  data-content-id="card-header"
                  data-card-id={activeItem.id}
                  className={cx('text-align-center display-block dls-gray-06')}
                  target="_blank"
                >
                  <img
                    className="card-compare-card-image"
                    src={activeItem.image}
                    alt=""
                    aria-labelledby={titleId}
                  />
                  <RawHtml
                    id={titleId}
                    className="heading-4 font-weight-bold margin-2-t"
                    tagName="h3"
                    html={activeItem.name}
                  />
                </a>
                <div
                  key={activeItem.id}
                  data-content-id="card-header-extra"
                  data-card-id={activeItem.id}
                  className={cx('text-align-center legal-1')}
                >
                  <p class="body-3 margin-1-tb">
                    <strong>${activeItem.annualFee}</strong> Annual Fee
                    {typeof activeItem.annualFeeSymbols === 'string' &&
                    activeItem.annualFeeSymbols.length > 0 ? (
                      <sup>{activeItem.annualFeeSymbols}</sup>
                    ) : null}
                  </p>
                  {activeItem.annualFeeSubtext && (
                    <RawHtml tagName="p" html={activeItem.annualFeeSubtext} />
                  )}
                  <p class="margin-1-t">
                    <a class="btn btn-sm" href={activeItem.applyUrl || activeItem.url}>
                      Apply Now
                    </a>
                  </p>
                  <p class="legal-1 margin-1-t">
                    <a
                      href={activeItem.offerAndBenefitTermsUrl}
                      target="_blank"
                      rel="noreferrer noopener"
                    >
                      <sup>♦︎</sup>
                      <sup>‡</sup>
                      <sup>†</sup>Offer &amp; Benefit Terms
                    </a>
                    &ensp;|&ensp;
                    <a href={activeItem.ratesAndFeesUrl} target="_blank" rel="noreferrer noopener">
                      <sup>¤</sup>Rates &amp; Fees
                    </a>
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </FullBleedContainerFluid>
      <CardStickyNavPortal>
        <CardHeaderSection
          hidden={hideStickyNav}
          style="order: 1000;"
          className="card-compare-card-header-row card-compare-card-header-row--bottom"
          sectionTitle={
            <div className='row' id='compare-cards-controls'>
              <div className="col-xs-11">
                <p class="heading-4">
                  Compare Card
                  <br />
                  Features and Benefits
                </p>
                <ul id="option-category-input">
                  <li className="container-option" onClick={() => navigateToUrl("best")}>
                    <label>
                      <input type="radio" name="card-category-input-selector" id="card-category-input-selector-1"  className="visually-hidden" value="best" />        
                      <div className="dls-bright-blue icon icon-sm icon-hover dls-icon-favorite"></div>
                      <div className="dls-bright-blue margin-1-l option-text">Best</div>
                    </label>
                  </li>
                  <li className="container-option" onClick={() => navigateToUrl("cash-back")}>
                    <label>
                      <input type="radio" name="card-category-input-selector" id="card-category-input-selector-2"  className="visually-hidden" value="cash-back" />        
                      <div className="dls-bright-blue icon icon-sm icon-hover dls-icon-cashback"></div>
                      <div className="dls-bright-blue margin-1-l option-text">Cash Back</div>
                    </label>
                  </li>
                  <li className="container-option" onClick={() => navigateToUrl("rewards")}>
                    <label>
                      <input type="radio" name="card-category-input-selector" id="card-category-input-selector-3"  className="visually-hidden" value="rewards" />        
                      <div className="dls-bright-blue icon icon-sm icon-hover dls-icon-rewards"></div>
                      <div className="dls-bright-blue margin-1-l option-text">Rewards</div>
                    </label>
                  </li>
                  <li className="container-option" onClick={() => navigateToUrl("travel")}>
                    <label>
                      <input type="radio" name="card-category-input-selector" id="card-category-input-selector-4"  className="visually-hidden" value="travel" />        
                      <div className="dls-bright-blue icon icon-sm icon-hover dls-icon-airplane"></div>
                      <div className="dls-bright-blue margin-1-l option-text">Travel</div>
                    </label>
                  </li>
                  <li className="container-option" onClick={() => navigateToUrl("no-annual-fee")}>
                    <label>
                      <input type="radio" name="card-category-input-selector" id="card-category-input-selector-5"  className="visually-hidden" value="no-fee" />        
                      <div className="dls-bright-blue icon icon-sm icon-hover dls-icon-no-fee"></div>
                      <div className="dls-bright-blue margin-1-l option-text">No Fee</div>
                    </label>
                  </li>
                  <span className='arrowDropdown'></span>
                </ul>
                <div className="row">
                  <div className="col-xs-12" id='backToTop'>
                    <div className="dls-bright-blue icon icon-sm icon-hover dls-glyph-link-out"></div>
                    <div className="dls-bright-blue margin-1-l option-text">Back to the top</div>
                  </div>
                </div>
              </div>
            </div>
          }
          sectionTitleExtraClasses="hidden-sm-down"
        >
          <div className="row flex-justify-center card-compare-content-node-container">
            {itemState.state.subsetItems.map((item) => (
              <div
                key={item.id}
                data-card-id={item.id}
                className={cx(
                  columnClass,
                  'pad-2-t pad-1-b pad-1-lr text-align-center no-scroll flex flex-column flex-justify-between'
                )}
              >
                <div>
                  {/* Here is the code about links to PDFs */}
                  <a href={item.pdpUrl} target="_blank">
                    <div
                      data-content-id="card-header"
                      data-card-id={item.id}
                      className={cx('dls-gray-06 card-compare-card-header-row-condensed-title-grid')}
                    >
                        <img
                          className="card-compare-card-image"
                          src={item.image}
                          alt=""
                          aria-labelledby={titleId}
                          style="max-height: 40px; min-width: 30px;"
                        />
                        <RawHtml id={titleId} className="label-2" tagName="h3" html={item.name} />
                    </div>
                  </a>
                  <div
                    data-content-id="card-header-annual-fee"
                    data-card-id={item.id}
                    className={cx('text-align-center legal-1')}
                  >
                    <p class="label-2 font-weight-normal margin-1-tb">
                      <strong>${item.annualFee}</strong> Annual Fee
                      {typeof item.annualFeeSymbols === 'string' &&
                      item.annualFeeSymbols.length > 0 ? (
                        <sup>{item.annualFeeSymbols}</sup>
                      ) : null}
                    </p>
                    {item.annualFeeSubtext && (
                      <RawHtml tagName="p" className="margin-0-t" html={item.annualFeeSubtext} />
                    )}
                  </div>
                </div>
                <div
                  data-content-id="card-header-extra"
                  data-card-id={item.id}
                  className={cx('text-align-center legal-1')}
                >
                  <p class="margin-1-t">
                    <a class="btn btn-sm dls-white" href={item.applyUrl || item.url}>
                      Apply Now
                    </a>
                  </p>
                  <p class="margin-1-t">
                    <a
                      href={item.offerAndBenefitTermsUrl}
                      target="_blank"
                      rel="noreferrer noopener"
                    >
                      <sup>♦︎</sup>
                      <sup>‡</sup>
                      <sup>†</sup>Offer &amp; Benefit Terms
                    </a>
                    &ensp;|&ensp;
                    <a href={activeItem.ratesAndFeesUrl} target="_blank" rel="noreferrer noopener">
                      <sup>¤</sup>Rates &amp; Fees
                    </a>
                  </p>
                </div>
              </div>
            ))}
          </div>
          {displayPagination && (
            <DotPagination
              selectedOptionId={activeItem.id}
              options={paginationOptions}
              onNext={() => itemState.setNext()}
              onPrev={() => itemState.setPrev()}
              onOptionIndexSelect={(idx) => itemState.setIdx(idx)}
            />
          )}
        </CardHeaderSection>
      </CardStickyNavPortal>
      <CardHeaderSection sectionTitle={<p class="heading-5">Great for</p>}>
        <div className="card-compare-striped-container">
          <div className="row flex-justify-center">
            {itemState.state.subsetItems.map((item) => {
              return (
                <div key={item.id} className={cx(columnClass, 'pad-0')}>
                  <div className="pad-2-lr pad-3-tb flex flex-wrap flex-align-center">
                    <RawHtml
                      tagName="span"
                      className="card-compare-great-for-label heading-4 font-weight-bold"
                      html={item.greatForTitle}
                    />
                  </div>
                </div>
              );
            })}
          </div>
          {greatForIndexHelper.map((greatForIdx) => {
            return (
              <div className="row flex-justify-center" key={greatForIdx.toString()}>
                {itemState.state.subsetItems.map((item) => {
                  const greatForItem = item.greatFor[greatForIdx] as
                    | CardDynamicIconRowNode
                    | undefined;

                  return (
                    <div
                      key={item.id}
                      data-content-id={`great-for-row-${greatForIdx}`}
                      data-card-id={item.id}
                      className={cx(columnClass, 'pad-0 flex')}
                    >
                      <div className="pad-2-lr pad-3-tb flex flex-wrap flex-align-center">
                        <span
                          class={cx(
                            'icon icon-lg dls-bright-blue margin-2-r',
                            greatForItem ? `dls-icon-${greatForItem.iconKey}` : null
                          )}
                        ></span>
                        <RawHtml
                          tagName="span"
                          className="card-compare-great-for-label"
                          html={greatForItem?.label || ''}
                        />
                      </div>
                    </div>
                  );
                })}
              </div>
            );
          })}
        </div>
      </CardHeaderSection>
      <CardHeaderSection sectionTitle={<p class="heading-5">Welcome Offer</p>} className="border-t">
        <div className="row flex-justify-center card-compare-content-node-container">
          {itemState.state.subsetItems.map((item) => (
            <div
              key={item.id}
              data-content-id="welcome-offer"
              data-card-id={item.id}
              className={cx(columnClass, 'pad-2-lr pad-4-tb')}
            >
              {item.welcomeOffer.map((i, idx) => (
                <CardCompareContentNode key={`${idx}`} node={i} />
              ))}
            </div>
          ))}
        </div>
      </CardHeaderSection>
      <CardHeaderSection
        sectionTitle={<p class="heading-5">Earning Rewards</p>}
        className="border-t"
      >
        <div className="row flex-justify-center card-compare-content-node-container">
          {itemState.state.subsetItems.map((item) => (
            <div
              key={item.id}
              data-content-id="earning-rewards"
              data-card-id={item.id}
              className={cx(columnClass, 'pad-2-lr pad-4-tb')}
            >
              {item.earningRewards.map((i, idx) => (
                <CardCompareContentNode key={`${idx}`} node={i} />
              ))}
            </div>
          ))}
        </div>
      </CardHeaderSection>
      <CardHeaderSection
        sectionTitle={<p className="heading-5">Card Benefits & Features</p>}
        className="border-t"
      >
        <div className="row flex-justify-center card-compare-content-node-container">
          {itemState.state.subsetItems.map((item) => (
            <div
              key={item.id}
              data-content-id="featured-benefits"
              data-card-id={item.id}
              className={cx(columnClass, 'pad-2-lr pad-4-tb')}
            >
              {item.moreBenefits.map((i, idx) => (
                <CardCompareContentNode key={`${idx}`} node={i} />
              ))}
            </div>
          ))}
        </div>
      </CardHeaderSection>





      1 Reward:[BBPC,BGC,AEBGC,BPC]
      2 No fee:[BBCC,BBPC,DSGBC]
      3 CashBack:[BBCC,LBRC,TPC]
      4 Airline:[BGC,BPC]

store=[BBPC,BGC,AEBGC,BPC,BBCC,BBPC,DSGBC,BBCC,LBRC,TPC,BGC,BPC]=12
common=[BBPC,BBCC,BPC,BGC]





